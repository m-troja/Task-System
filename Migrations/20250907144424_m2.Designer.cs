// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Task_System.Data;

#nullable disable

namespace Task_System.Migrations
{
    [DbContext(typeof(PostgresqlDbContext))]
    [Migration("20250907144424_m2")]
    partial class m2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_user_users_id");

                    b.ToTable("role_user", (string)null);
                });

            modelBuilder.Entity("Task_System.Model.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ROLE_USER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ROLE_ADMIN"
                        });
                });

            modelBuilder.Entity("Task_System.Model.Entity.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_team");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_team_user_id");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("Task_System.Model.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("IssueId")
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_comments_author_id");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_comments_issue_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("integer")
                        .HasColumnName("assignee_id");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_issues");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_issues_assignee_id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_issues_author_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_issues_project_id");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IssueId")
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    b.Property<string>("KeyString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key_string");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_keys");

                    b.HasIndex("IssueId")
                        .IsUnique()
                        .HasDatabaseName("ix_keys_issue_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_keys_project_id");

                    b.ToTable("keys", (string)null);
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Task_System.Model.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_roles_roles_id");

                    b.HasOne("Task_System.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_users_users_id");
                });

            modelBuilder.Entity("Task_System.Model.Entity.Team", b =>
                {
                    b.HasOne("Task_System.Model.Entity.User", null)
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_team_users_user_id");
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Comment", b =>
                {
                    b.HasOne("Task_System.Model.Entity.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_author_id");

                    b.HasOne("Task_System.Model.IssueFolder.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_issues_issue_id");

                    b.Navigation("Author");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Issue", b =>
                {
                    b.HasOne("Task_System.Model.Entity.User", "Assignee")
                        .WithMany("AssignedIssues")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_issues_users_assignee_id");

                    b.HasOne("Task_System.Model.Entity.User", "Author")
                        .WithMany("AuthoredIssues")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_issues_users_author_id");

                    b.HasOne("Task_System.Model.IssueFolder.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_issues_projects_project_id");

                    b.Navigation("Assignee");

                    b.Navigation("Author");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Key", b =>
                {
                    b.HasOne("Task_System.Model.IssueFolder.Issue", "Issue")
                        .WithOne("Key")
                        .HasForeignKey("Task_System.Model.IssueFolder.Key", "IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_keys_issues_issue_id");

                    b.HasOne("Task_System.Model.IssueFolder.Project", "Project")
                        .WithMany("Keys")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_keys_projects_project_id");

                    b.Navigation("Issue");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Task_System.Model.Entity.User", b =>
                {
                    b.Navigation("AssignedIssues");

                    b.Navigation("AuthoredIssues");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Issue", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Key")
                        .IsRequired();
                });

            modelBuilder.Entity("Task_System.Model.IssueFolder.Project", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Keys");
                });
#pragma warning restore 612, 618
        }
    }
}
